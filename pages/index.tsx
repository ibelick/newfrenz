import type { NextPage } from "next";
import Head from "next/head";
import {
  useConnect,
  useAccount,
  useContract,
  useSigner,
  useNetwork,
} from "wagmi";
import OnboardingCollectible from "utils/OnboardingCollectible.json";
import { chain } from "wagmi";
import { useState } from "react";

const CONTRACT_ADDRESS = "0x22647A442F2BB92272F00D4990b8B6C91d9120a4";
const BASE_URL_OPENSEA_TESTNET = "https://testnets.opensea.io";
const BASE_URL_RARIBLE_TESTNET = "https://rinkeby.rarible.com";

const Home: NextPage = () => {
  const [{ data: connectData, loading: isLoadingConnectData }, connect] =
    useConnect();
  const [{ data: accountData, loading: isLoadingAccountData }, disconnect] =
    useAccount({
      fetchEns: true,
    });
  const [{ data: signerData, loading: isLoadingSignerData }, getSigner] =
    useSigner();
  const contract = useContract({
    addressOrName: CONTRACT_ADDRESS,
    contractInterface: OnboardingCollectible.abi,
    signerOrProvider: signerData,
  });
  const [
    { data: chainData, error, loading: isLoadingChainData },
    switchNetwork,
  ] = useNetwork();
  const [mintedTokenId, setMintedTokenId] = useState<number | null>(null);
  const [isMinting, setIsMinting] = useState<boolean>(false);
  const isUserConnectedToCorrectChain =
    chainData?.chain && chainData?.chain?.id === chain.rinkeby.id;

  const mint = async () => {
    setIsMinting(true);
    try {
      console.log("Going to pop wallet now to pay gas...");
      let nftTxn = await contract.create();
      console.log("Mining...please wait.");
      await nftTxn.wait();
      console.log(
        `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`
      );
      getTokenId();
      setIsMinting(false);
    } catch (error) {
      console.error("error", error);
      setIsMinting(false);
    }
  };

  const getTokenId = async () => {
    try {
      contract.on("collectibleMinted", (from: string, tokenId: number) => {
        setMintedTokenId(tokenId);
      });
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className="text-3xl font-bold">Hello world!</h1>
      {connectData?.connectors?.map((connector) => {
        return (
          <div key={connector.id}>
            <span>{connector.name}</span>{" "}
            <button
              onClick={() => {
                connect(connector);
              }}
            >
              connect
            </button>
          </div>
        );
      })}
      <div>{accountData?.address}</div>
      {accountData?.address ? (
        <div>
          <button onClick={disconnect}>Disconnect</button>
        </div>
      ) : null}
      {accountData?.address ? (
        <div>
          <button onClick={mint}>mint</button>
        </div>
      ) : null}
      {switchNetwork && !isUserConnectedToCorrectChain ? (
        <div className="flex flex-col items-start">
          <span>
            your connect to the wrong chain, current chain:{" "}
            {chainData?.chain?.name}
          </span>
          <button onClick={() => switchNetwork(4)}>switch to Rinkeby</button>
        </div>
      ) : null}
      {isMinting ? <span>minting loading...</span> : null}
      {mintedTokenId ? (
        <div>
          <span>{`${BASE_URL_OPENSEA_TESTNET}/assets/${CONTRACT_ADDRESS}/${mintedTokenId}`}</span>
        </div>
      ) : null}
    </div>
  );
};

export default Home;
